name: Build and Deploy Frontend

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  lint:
    name: Lint Code
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint -- --max-warnings 200
        continue-on-error: true

  build:
    name: Build Application
    runs-on: self-hosted
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_BACKEND_URL: ${{ secrets.VITE_BACKEND_URL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/
          retention-days: 7

  deploy:
    name: Deploy to Production
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t pic-frontend:latest -t pic-frontend:${{ github.sha }} .

      - name: Stop existing container
        run: |
          docker stop pic-frontend || true
          docker rm pic-frontend || true

      - name: Run new container
        run: |
          docker run -d \
            --name pic-frontend \
            --restart unless-stopped \
            -p 127.0.0.1:3000:80 \
            pic-frontend:latest

      - name: Wait for container to be healthy
        run: |
          timeout 60 bash -c 'until docker inspect --format="{{json .State.Health.Status}}" pic-frontend | grep -q "healthy"; do sleep 2; done'

      - name: Cleanup old images
        run: |
          docker image prune -af --filter "until=24h"

      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Frontend deployed successfully at $(date)"
          else
            echo "❌ Frontend deployment failed at $(date)"
          fi

